import requests
import json
from flask import Flask, request, jsonify
from datetime import datetime
from pymongo import MongoClient
import pandas as pd

collection = None

def get_mongo_collection():
    global collection
    if collection is None:
        # Estabelece a conex√£o apenas se ainda n√£o estiver conectada
        client = MongoClient('mongodb://localhost:27017/')
        db = client["whatsapp"]
        collection = db["messages"]
    return collection



app = Flask(__name__)

@app.route("/webhook", methods=["POST"])
def webhook():

    data = request.get_json()
    # print(data)

    # Processa a mensagem
    retorno = processa_mensagem(data)

    # Enviar a resposta
    envia_resposta(telefone, resposta)

    return jsonify({"status": "success"}), 200



def processa_mensagem(data):
    # Extrai as informa√ß√µes da mensagem
    numero = data['data']['key']['remoteJid'].split('@')[0]
    try:
        mensagem = data['data']['message']['conversation']
    except KeyError:
        mensagem = data['data']['message']['extendedTextMessage']['text']
    data_hora = datetime.fromtimestamp(data['data']['messageTimestamp']).strftime('%Y-%m-%d - %H:%M')
    formato = "texto" if data['data']['messageType'].isin("conversation", "extendedTextMessage") else "nao_texto"
    chat = {
        "mensagem": mensagem,
        "data_hora": data_hora,
        "formato": formato,
        "tipo": "recebida"
    }
    
    # Armazena a mensagem no banco de dados
    collection = get_mongo_collection()
    numero_existente = collection.find_one({"numero": numero})
    if numero_existente:
        collection.update_one({"numero": numero}, {"$push": {"chat": chat}})
    else:
        collection.insert_one({
            "numero": numero,
            "primeira_mensagem": 1,
            "autenticar_matricula": 0,
            "comecar_negociacao": 0,
            "autenticar_cpf": 0,
            "autenticar_data_nascimento": 0,
            "conversa_ativa": 0,
            "nome_usuario": "",
            "chat": [chat]
        })

    # Carrega o hist√≥rico de mensagens
    historico = collection.find_one({"numero": numero})

    if historico["primeira_mensagem"]:
        resposta = """Ol√°! Muito prazer, me chamo Sander. Sou o novo bot inteligente do Negocia AI, um projeto de Intelig√™ncia Artificial desenvolvido pelo time de Advanced Analytics de Recupera√ß√µes! Nesse momento, estou sendo treinado para negociar d√≠vidas direto com o cliente. 

Essa √© uma etapa de teste interno, com objetivo de avaliar como eu me sairia numa conversa real com um cliente. Para isso, vamos simular uma negocia√ß√£o com dados de algum cliente fict√≠cio, ok?

Mas antes de come√ßar a testar, preciso que me informe o n√∫mero da sua matr√≠cula...
        """
        collection.update_one({"numero": numero}, {"$set": {"primeira_mensagem": 0, "autenticar_matricula": 1}})


    if historico["autenticar_matricula"]:

        base_matriculas = pd.read_excel("matriculas.xlsx", engine="openpyxl")
        matricula_informada = int(str(mensagem).replace(" ", "").replace(".", "").replace("-", "").replace("/", "").replace("T", ""))
        primeiro_nome_usuario = base_matriculas.query("matricula == @matricula_informada")["nome"].values[0].split(" ")[0]

        if matricula_informada not in base_matriculas["matricula"].values:
            resposta = f"""Desculpe, n√£o consegui encontrar sua matr√≠cula em nossa base de dados. üò¢
            
Por favor, verifique se digitou corretamente e tente novamente.
            
Se mesmo assim n√£o der certo, pe√ßa para o time de Advanced Analytics de Recupera√ß√µes adicionar sua matr√≠cula na base de usu√°rios habilitados para teste."""

        else:    
            resposta = f"""Que honra te ver por aqui, {primeiro_nome_usuario}! üöÄ
            
Vou te explicar como esse teste vai funcionar:

1. Vamos simular uma negocia√ß√£o de d√≠vida com um cliente fict√≠cio.
2. Voc√™ vai representar o cliente e eu vou representar o atendente.
3. Vou te passar as informa√ß√µes do cliente e voc√™ vai me ajudar a negociar a d√≠vida.
4. Vamos tentar chegar a um acordo que seja bom para ambas as partes.
5. A qualquer momento da conversa voc√™ pode digitar alguns comandos especiais, como #ajuda, #encerrar, #sair, #cancelar.
    - #ajuda: para receber informa√ß√µes sobre os comandos dispon√≠veis.
    - #encerrar: para encerrar a conversa.
    - #sair: para sair da negocia√ß√£o e reiniciar o chat.
    - #cancelar: para cancelar a √∫ltima a√ß√£o realizada.
6. Quando estiver pronto para come√ßar, me avise digitando #come√ßar.

Agora, voc√™ precisa escolher um cliente fict√≠cio para simular a negocia√ß√£o. ü§ù

Voc√™ prefere: 
1. Escolher um cliente fict√≠cio espec√≠fico da planilha?
2. Quer que eu escolha um cliente fict√≠cio aleat√≥rio para voc√™?

Digite o n√∫mero correspondente √† sua escolha.
"""
        collection.update_one({"numero": numero}, {"$set": {"autenticar_matricula": 0, "escolher_cliente": 1}})


    if historico["escolher_cliente"]:
        if mensagem == "1":
            resposta = """√ìtimo! Ent√£o assim que estiver pronto, me avise digitando #come√ßar."""
            collection.update_one({"numero": numero}, {"$set": {"escolher_cliente": 0, "comecar_negociacao": 1}})

        elif mensagem == "2":
            base_clientes = pd.read_excel("base_clientes_excel.xlsx", engine="openpyxl")
            cliente_aleatorio = base_clientes.sample(1).iloc[0]

            nome = cliente_aleatorio["nome"].values[0]
            cpf = cliente_aleatorio["cpf"].values[0]
            segmento = cliente_aleatorio["segmento"].values[0]
            genero = cliente_aleatorio["genero"].values[0]
            prob_rolagem = cliente_aleatorio["prob_rolagem"].values[0]
            data_nascimento = cliente_aleatorio["data_nascimento"].values[0]
            produto = cliente_aleatorio["produto"].values[0]
            numero_contrato = cliente_aleatorio["nro_contrato"].values[0]
            valor_divida = cliente_aleatorio["vlr_divida"].values[0]
            dias_atraso = cliente_aleatorio["dias_atraso"].values[0]

            resposta = f"""Beleza!
             
Ent√£o, voc√™ ser√° o seguinte cliente fict√≠cio:
- Nome: {nome}
- CPF: {cpf}
- Segmento: {segmento}
- G√™nero: {genero}
- Probabilidade de Rolagem: {prob_rolagem}
- Data de Nascimento: {data_nascimento}
- Produto: {produto}
- N√∫mero do Contrato: {numero_contrato}
- D√≠vida: R$ {valor_divida}
- Dias de Atraso: {dias_atraso}

Assim que estiver pronto, me avise digitando #come√ßar.
"""
        collection.update_one({"numero": numero}, {"$set": {"escolher_cliente": 0, "comecar_negociacao": 1}})
    else:
        resposta = """Desculpe, n√£o entendi o que voc√™ quis dizer. ü§î
Digite o n√∫mero referente a uma das op√ß√µes dispon√≠veis:
1. Quero escolher um cliente fict√≠cio espec√≠fico da planilha.
2. Escolha para mim um cliente fict√≠cio aleat√≥rio.

Se voc√™ digitar 1, voc√™ poder√° escolher qualquer cliente fict√≠cio espec√≠fico da planilha que o time de Advanced Analytics passou.

Se voc√™ digitar 2, eu mesmo escolherei um cliente fict√≠cio aleat√≥rio para voc√™.
"""

    if historico["comecar_negociacao"]:
        if mensagem == "#come√ßar":
            resposta = """Show... ent√£o vamos come√ßar! üöÄ

Incorporando o personagem üßò‚Äç‚ôÇÔ∏è... Foi!

---

Ol√°, meu nome √© Sander, sou o novo bot inteligente do Santander. Fui treinado para ajudar voc√™ a negociar suas d√≠vidas e organizar sua vida financeira.
             
Para sua seguran√ßa, preciso que me informe o n√∫mero do seu CPF.
"""
            collection.update_one({"numero": numero}, {"$set": {"comecar_negociacao": 0, "autenticar_cpf": 1}})
        else:
            resposta = """Desculpe, n√£o entendi o que voc√™ quis dizer. ü§î
Assim que estiver pronto, me avise digitando #come√ßar.
"""

    if historico["autenticar_cpf"]:
        base_clientes = pd.read_excel("base_clientes_excel.xlsx", engine="openpyxl")
        cpf_informado = str(mensagem).replace(" ", "").replace(".", "").replace("-", "").replace("/", "")
        primeiro_nome_cliente = base_clientes.query("cpf == @cpf_informado")["nome"].values[0].split(" ")[0]
        if cpf_informado not in base_clientes["cpf"].values:
            resposta = f"""Desculpe, n√£o consegui encontrar seu CPF em nossa base de dados. üò¢

Verifique se digitou corretamente e tente novamente.
"""
        else:
            resposta = f"""√ìtimo, {primeiro_nome_cliente}! Consegui localizar aqui. Agora preciso que me informe sua data de nascimento."""
            collection.update_one({"numero": numero}, {"$set": {"autenticar_cpf": 0, "autenticar_data_nascimento": 1}})

    if historico["autenticar_data_nascimento"]:

        data_nascimento_informada = str(mensagem).strftime('%Y-%m-%d')
        data_nascimento_cliente = base_clientes.query("cpf == @cpf_informado")["data_nascimento"].values[0]

        if data_nascimento_informada != data_nascimento_cliente:
            resposta = f"""Desculpe, a data de nascimento informada n√£o confere com a data de nascimento cadastrada em nosso sistema. üò¢
Por favor, verifique se digitou corretamente e tente novamente.
"""
        else:
            resposta = f"""Perfeito, {primeiro_nome_cliente}! Seus dados foram validados com sucesso üöÄ
Me conta, o que posso fazer por voc√™ hoje? ‚ô®Ô∏è
"""
            collection.update_one({"numero": numero}, {"$set": {"autenticar_data_nascimento": 0, "realizar_negociacao": 1}})


    if historico["realizar_negociacao"]:
        resposta = """bot_chat_gpt"""


# Fun√ß√£o para enviar resposta
def envia_resposta(telefone, resposta):

    url = "http://localhost:8080/message/sendText/NegociaAI"

    headers = {
        "Content-Type": "application/json",
        "apikey": "7ij3826ys3glsr95hej01" # Corrigir
    }

    json_resposta = {
        "number": telefone,
        "options": {
            "delay": 1200,
            "presence": "composing",
            "linkPreview": False
        },
        "textMessage": {
            "text": f"{resposta}"
        }
    }

    response = requests.post(url, headers=headers, json=json_resposta)



if __name__ == "__main__":
    app.run(debug=True, port=5000)


# Testar o que j√° foi feito!!!


# Implantar comandos
# comandos funcionam somente ap√≥s in√≠cio da negocia√ß√£o
#             # reportar
#             # ajuda
#         # encerrar_chat / reiniciar_chat


# Implantar valida√ß√µes
#         # Formato da mensagem (somente texto)
#         # Se √© um comando (#encerrar, #ajuda, #sair, #cancelar)

#     # Informa√ß√µes relevantes:
#     # data e hora da mensagem
#     # data e hora da mensagem anterior
#     # hist√≥rico de mensagens --> banco de dados tempor√°rio para acesso mais r√°pido durante a conversa

# Guardar dados autenticados do cliente
# D√∫vida: e se tiver muitas mensagens simultaneamente? Vai dar problema?
#    # Verificar como colocar as mensagens em uma fila de processamento para evitar problemas
# Armazenar mensagens enviadas
# Implantar reset de chat (come√ßar do zero)
#   # Autentica matr√≠cula de novo? Se n√£o, manter banco de dados telefone/matr√≠cula autenticada?
#   # No outro dia, for√ßa come√ßar do zero?
#   # Explica tudo de novo?
#   # Etc.
#     # Implantar limite de tentativas para autentica√ß√£o
#     # Implantar limite de intera√ß√µes na parte do chatbot (mensagem informativa dizendo que o limite di√°rio de intera√ß√µes para aquele n√∫mero de telefone foi atingido)


# #  https://a7c4-189-97-90-110.ngrok-free.app/webhook

# Fun√ß√£o para enviar resposta
# def envia_resposta(telefone, resposta):

#     url = "http://localhost:8080/message/sendText/NegociaAI_v2"

#     headers = {
#         "Content-Type": "application/json",
#         "apikey": "7ij3826ys3glsr95hej01"
#     }

#     json_resposta = {
#         "number": telefone,
#         "options": {
#             "delay": 1200,
#             "presence": "composing",
#             "linkPreview": False
#         },
#         "textMessage": {
#             "text": f"{resposta}"
#         }
#     }

#     response = requests.post(url, headers=headers, json=json_resposta)











    # data = request.get_json()
    # print("Dados recebidos:", data)  # Isso ajudar√° a ver a estrutura dos dados

    # # Acessando a mensagem aninhada
    # try:
    #     message = data["data"]["message"]["conversation"]
    #     print("Mensagem recebida:", message)
    #     return jsonify({"status": "received", "message": message}), 200
    # except KeyError as e:
    #     print("Erro ao acessar uma chave:", e)
    #     return jsonify({"error": "Chave n√£o encontrada", "details": str(e)}), 400

    # Processa a mensagem recebida
    # response_message = process_message(message)

    # Envia a resposta
    # send_message(sender, response_message)

    # return jsonify({"status": "success"}), 200
