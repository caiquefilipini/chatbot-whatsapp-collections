import requests
import os
from dotenv import load_dotenv, find_dotenv
from flask import Flask, request, jsonify
from datetime import datetime
from pymongo import MongoClient
import pandas as pd
from dateutil import parser
import openai

collection = None

load_dotenv(find_dotenv())
openai.api_key = os.getenv("OPENAI_API_KEY")

global DATA_PATH 
DATA_PATH = os.path.join(os.path.dirname(__file__), "../data")

global base_clientes
base_clientes = pd.read_excel(os.path.join(DATA_PATH, "base_clientes_excel.xlsx"), engine="openpyxl")

def get_mongo_collection():
    global collection, telefones_teste
    if collection is None:
        # Estabelece a conex√£o apenas se ainda n√£o estiver conectada
        client = MongoClient('mongodb://localhost:27017/')
        db = client["whatsapp"]
        collection = db["messages"]
        telefones_teste = db["matriculas"]
    return collection, telefones_teste


app = Flask(__name__)

@app.route("/webhook", methods=["POST"])
def webhook():

    # Captura a mensagem recebida
    data = request.get_json()
    # print(data)

    # Processa a mensagem
    retorno = processa_mensagem(data)

    # Enviar a resposta
    envia_resposta(retorno["telefone"], retorno["resposta"])

    return jsonify({"status": "success"}), 200


def _carregar_ofertas(cpf):
    ofertas = pd.read_excel(os.path.join(DATA_PATH, "ofertas.xlsx"), engine="openpyxl")
    ofertas = ofertas.query("CPF == @cpf")

    cols_a_vista = [
        "Valor de Entrada ou √† Vista",
        "Desconto Concedido"
    ]

    cols_parcelado = [
        "Valor de Entrada ou √† Vista",
        "Quantidade de Parcelas",
        "Valor da Parcela",
        "Taxa de Juros (am)",
        "Taxa CET",
        "Desconto Concedido"
    ]

    ofertas_a_vista = ofertas[ofertas['Tipo de Oferta'] == '√Ä Vista'][cols_a_vista].rename(columns={"Valor de Entrada ou √† Vista": "valor", "Desconto Concedido": "desconto"}).to_dict(orient='records')
    ofertas_parcelado = ofertas[ofertas['Tipo de Oferta'] == 'Parcelado'][cols_parcelado].rename(columns={"Valor de Entrada ou √† Vista": "valor", "Quantidade de Parcelas": "parcelas", "Valor da Parcela": "valor_parcela", "Taxa de Juros (am)": "taxa_juros", "Taxa CET": "taxa_cet", "Desconto Concedido": "desconto"}).to_dict(orient='records')

    relacao_ofertas = {
        'Ofertas √Ä Vista': ofertas_a_vista,
        'Ofertas Parcelado': ofertas_parcelado
    }

    return relacao_ofertas


# Fun√ß√£o para carregar o prompt
def _carrega_prompt(dados_cliente, ofertas_disponiveis):
    PROMPT_FILE = os.path.join(os.path.dirname(__file__), "prompts", "prompt_negociacao.txt")
    with open(PROMPT_FILE, "r", encoding="utf-8") as file:
        return file.read().format(
            dados_cliente=dados_cliente, 
            ofertas_disponiveis=ofertas_disponiveis
        )
    

def processa_mensagem(data):
    # Extrai as informa√ß√µes da mensagem
    numero = data['data']['key']['remoteJid'].split('@')[0]
    try:
        mensagem = data['data']['message']['conversation']
    except KeyError:
        mensagem = data['data']['message']['extendedTextMessage']['text']
    data_hora_recebida = datetime.fromtimestamp(data['data']['messageTimestamp']).strftime('%Y-%m-%d - %H:%M')
    formato = "texto" if data['data']['messageType'] in ["conversation", "extendedTextMessage"] else "nao_texto"
    # chat = {
    #     "mensagem": mensagem,
    #     "data_hora": data_hora,
    #     "tipo": "recebida"
    # }

    if formato != "texto":
        return {"telefone": numero, "resposta": "Desculpe, ainda n√£o aprendi a entender mensagens em formatos diferentes de texto."}
    
    else:
        # Armazena a mensagem no banco de dados
        collection, telefones_teste = get_mongo_collection()
        historico = collection.find_one({"numero": numero})
        if historico:
            # collection.update_one({"numero": numero}, {"$push": {"chat": chat}})
            pass
        else:
            collection.insert_one({
                "numero": numero,
                "cpf": 0,
                "data_nascimento": "",
                "primeiro_nome": "",
                "primeira_mensagem": 1,
                "autenticar_matricula": 0,
                "escolher_cliente": 0,
                "comecar_negociacao": 0,
                "autenticar_cpf": 0,
                "autenticar_data_nascimento": 0,
                "inicio_chatbot": 0,
                "reportar_problema": 0,
                "nome_usuario": "",
                "chat": []
                # "chat": [chat]
            })

        # Carrega o hist√≥rico de mensagens
        historico = collection.find_one({"numero": numero})

        #encerrar, #iniciar, #ajuda, #report
        # Verifica se √© um comando
        if mensagem in ["#encerrar", "#iniciar", "#ajuda", "#reportar", "#continuar"]:

            if mensagem == "#encerrar":
                collection.delete_one({"numero": numero})
                return {"telefone": numero, "resposta": "A conversa foi encerrada. Para iniciar uma nova conversa, envie qualquer mensagem."}
            
            if mensagem == "#iniciar":
                collection.delete_one({"numero": numero})
                return {"telefone": numero, "resposta": "A conversa foi encerrada. Para iniciar uma nova conversa, envie qualquer mensagem."}
            
            if mensagem == "#ajuda":
                resposta = """Opaaa... parece que voc√™ precisa de ajuda! üÜò

Seguem algumas informa√ß√µes importantes para voc√™:

- O objetivo desse teste interno √© simular uma negocia√ß√£o de d√≠vida com um cliente fict√≠cio.
- Voc√™ representa o cliente e eu vou representando o atendente.
- Fique √† vontade para criar situa√ß√µes diferentes na conversa.
- Lembre-se: Agora, nosso objetivo n√£o √© fazer dar tudo certo, mas sim avaliar como eu me sairia em diferentes situa√ß√µes de uma conversa real com o cliente.
- Ou seja, voc√™ pode testar o que quiser, sem medo de errar! O momento de errar √© agora üòÑ
- A qualquer momento da conversa voc√™ pode digitar alguns comandos especiais:
    - #iniciar: inicia um chat novo
    - #encerrar: encerra a conversa
    - #ajuda: exibe essa mensagem que voc√™ est√° lendo agora üòÇ
    - #reportar: reporta alguma problema

Espero ter ajudado! üòä

Para continuar a conversa, envie uma mensagem sobre a negocia√ß√£o.
"""
                return {"telefone": numero, "resposta": resposta}
            
            if mensagem == "#reportar":
                resposta = """Hmm... Entendi que voc√™ quer reportar algo ü§î

Vou considerar sua pr√≥xima mensagem como um report e enviar ao time de Advanced Analytics. Por favor, digite o que deseja reportar.
"""
                collection.update_one({"numero": numero}, {"$set": {"reportar_problema": 1}})
                return {"telefone": numero, "resposta": resposta}
            
            # if mensagem == "#continuar":
            #     resposta = """Ok, vamos continuar a conversa. Assuma novamente o papel do cliente enviando uma mensagem sobre a negocia√ß√£o."""

            #     return {"telefone": numero, "resposta": resposta}
            
        else:
            historico = collection.find_one({"numero": numero})
            

        if historico["reportar_problema"]:
            resposta = f"""Show... Enviei seu report para o time de Advanced Analytics avaliar. Obrigado por reportar o problema! üòä
            
Agora, voc√™ pode voltar ao papel do cliente e continuar a conversa normalmente.
"""
            collection.update_one({"numero": numero}, {"$set": {"reportar_problema": 0}})
            return {"telefone": numero, "resposta": resposta}


        if historico["primeira_mensagem"]:

            # Verifica se o n√∫mero j√° enviou alguma mensagem antes
            historio_telefone = telefones_teste.find_one({"numero": numero})
            if historio_telefone:
                collection.update_one(
                    {"numero": numero},
                    {"$set": {"primeira_mensagem": 0, "escolher_cliente": 1, "nome_usuario": historio_telefone["nome_usuario"]}}
                )

                resposta = f"""Ol√° de novo, {historio_telefone["nome_usuario"]}!

Como j√° nos conhecemos antes, entendo que voc√™ j√° sabe como funciona esse teste. üòÑ

Mas se precisar refrescar a mem√≥ria, √© s√≥ digitar #ajuda que eu te passo novamente as orienta√ß√µes sobre esse teste, ok?

Para fazer um novo teste com um cliente fict√≠cio, escolha uma das op√ß√µes abaixo:

1. Escolher um cliente fict√≠cio espec√≠fico da planilha.
2. Escolha um cliente fict√≠cio aleat√≥rio para mim.

Digite o n√∫mero correspondente √† sua escolha.
"""
                return {"telefone": numero, "resposta": resposta}


            resposta = """Ol√°! Muito prazer, me chamo Sander. Sou o novo bot inteligente do Negocia AI, um projeto de Intelig√™ncia Artificial desenvolvido pelo time de Advanced Analytics de Recupera√ß√µes! Nesse momento, estou sendo treinado para negociar d√≠vidas direto com o cliente. 

Essa √© uma etapa de teste interno, com objetivo de avaliar como eu me sairia numa conversa real com um cliente. Para isso, vamos simular uma negocia√ß√£o com dados de algum cliente fict√≠cio, ok?

Mas antes de come√ßar a testar, preciso que me informe o n√∫mero da sua matr√≠cula...
"""
            collection.update_one({"numero": numero}, {"$set": {"primeira_mensagem": 0, "autenticar_matricula": 1}})
            return {"telefone": numero, "resposta": resposta}

        if historico["autenticar_matricula"]:

            base_matriculas = pd.read_excel(os.path.join(DATA_PATH, "matriculas.xlsx"), engine="openpyxl")
            try:
            # matricula_informada = int(str(mensagem).replace(" ", "").replace(".", "").replace("-", "").replace("/", "").replace("T", "")) # for√ßar virar um n√∫mero
                matricula_informada = int(str(mensagem).replace(" ", "").replace(".", "").replace("-", "").replace("/", "").replace("T", "")) # for√ßar virar um n√∫mero
            except:
                matricula_informada = 0

            if matricula_informada not in base_matriculas["matricula"].values:
                resposta = f"""Desculpe, n√£o consegui encontrar sua matr√≠cula em nossa base de dados. üò¢
                
Por favor, verifique se digitou corretamente e tente novamente.
            
Se mesmo assim n√£o der certo, pe√ßa para o time de Advanced Analytics de Recupera√ß√µes adicionar sua matr√≠cula na base de usu√°rios habilitados para teste.
"""
                return {"telefone": numero, "resposta": resposta}
            else:    
                primeiro_nome_usuario = base_matriculas.query("matricula == @matricula_informada")["nome"].values[0].split(" ")[0]
                resposta = f"""Que honra te ver por aqui, {primeiro_nome_usuario}! üöÄ
                
Vou te explicar como esse teste vai funcionar:

1. Vamos simular uma negocia√ß√£o de d√≠vida com um cliente fict√≠cio.
2. Voc√™ vai representar o cliente e eu vou representar o atendente.
4. Vamos tentar chegar a um acordo que seja bom para ambas as partes.
5. A qualquer momento da conversa voc√™ pode digitar alguns comandos especiais, como:
    - #iniciar: inicia um chat novo
    - #encerrar: para encerrar a conversa
    - #ajuda: exibe as orienta√ß√µes sobre esse teste
    - #reportar: reporta alguma problema

Agora, voc√™ precisa escolher um cliente fict√≠cio para simular a negocia√ß√£o. ü§ù

O que voc√™ prefere: 
1. Escolher um cliente fict√≠cio espec√≠fico da planilha? Ou...
2. Quer que eu escolha um cliente fict√≠cio aleat√≥rio para voc√™?

Digite o n√∫mero correspondente √† sua escolha.
"""
            collection.update_one(
                {"numero": numero},
                {"$set": {"nome_usuario": primeiro_nome_usuario, "autenticar_matricula": 0, "escolher_cliente": 1}})
            telefones_teste.insert_one({"numero": numero, "nome_usuario": primeiro_nome_usuario})
            return {"telefone": numero, "resposta": resposta}

        if historico["escolher_cliente"]:
            if mensagem == "1":
                resposta = """√ìtimo! Ent√£o assim que estiver pronto, me avise digitando #ja"""
                collection.update_one({"numero": numero}, {"$set": {"escolher_cliente": 0, "comecar_negociacao": 1}})
                return {"telefone": numero, "resposta": resposta}

            elif mensagem == "2":
                # base_clientes = pd.read_excel(os.path.join(DATA_PATH, "base_clientes_excel.xlsx"), engine="openpyxl")
                cliente_aleatorio = base_clientes.sample(1).iloc[0]

                nome = cliente_aleatorio["nome"]
                cpf = cliente_aleatorio["cpf"]
                segmento = cliente_aleatorio["segmento"]
                genero = cliente_aleatorio["genero"]
                prob_rolagem = cliente_aleatorio["prob_rolagem"]
                data_nascimento = cliente_aleatorio["data_nascimento"].strftime('%Y-%m-%d')
                produto = cliente_aleatorio["produto"]
                numero_contrato = cliente_aleatorio["nro_contrato"]
                valor_divida = cliente_aleatorio["vlr_divida"]
                dias_atraso = cliente_aleatorio["dias_atraso"]
                resposta = f"""Beleza!
                
Ent√£o, voc√™ ser√° o seguinte cliente fict√≠cio:
- Nome: {nome}
- CPF: {cpf}
- Segmento: {segmento}
- G√™nero: {genero}
- Probabilidade de Rolagem: {prob_rolagem}
- Data de Nascimento: {data_nascimento}
- Produto: {produto}
- N√∫mero do Contrato: {numero_contrato}
- D√≠vida: R$ {valor_divida}
- Dias de Atraso: {dias_atraso}

Assim que estiver pronto, me avise digitando #ja
"""
                collection.update_one({"numero": numero}, {"$set": {"escolher_cliente": 0, "comecar_negociacao": 1}})
                return {"telefone": numero, "resposta": resposta}
            else:
                resposta = """Desculpe, n√£o entendi o que voc√™ quis dizer. ü§î
    Digite o n√∫mero referente a uma das op√ß√µes dispon√≠veis:
    1. Quero escolher um cliente fict√≠cio espec√≠fico da planilha.
    2. Escolha para mim um cliente fict√≠cio aleat√≥rio.

    Se voc√™ digitar 1, voc√™ poder√° escolher qualquer cliente fict√≠cio espec√≠fico da planilha que o time de Advanced Analytics passou.

    Se voc√™ digitar 2, eu mesmo escolherei um cliente fict√≠cio aleat√≥rio para voc√™.
    """
                return {"telefone": numero, "resposta": resposta}
        

        if historico["comecar_negociacao"]:
            if mensagem == "#ja":
                resposta = """Show... ent√£o vamos come√ßar! üöÄ
                
Incorporando o personagem üßò‚Äç‚ôÇÔ∏è... Foi!

---

Ol√°, meu nome √© Sander, sou o novo bot inteligente do Santander. Fui treinado para ajudar voc√™ a negociar suas d√≠vidas e organizar sua vida financeira.
            
Para sua seguran√ßa, preciso que me informe o n√∫mero do seu CPF.
"""
                collection.update_one({"numero": numero}, {"$set": {"comecar_negociacao": 0, "autenticar_cpf": 1}})
                return {"telefone": numero, "resposta": resposta}
            else:
                resposta = """Desculpe, n√£o entendi o que voc√™ quis dizer. ü§î
Assim que estiver pronto, me avise digitando #ja
"""
                return {"telefone": numero, "resposta": resposta}

        if historico["autenticar_cpf"]:
            # base_clientes = pd.read_excel(os.path.join(DATA_PATH, "base_clientes_excel.xlsx"), engine="openpyxl")
            cpf_informado = int(str(mensagem).replace(" ", "").replace(".", "").replace("-", "").replace("/", ""))
        
            if cpf_informado not in base_clientes["cpf"].values:
                resposta = f"""Desculpe, n√£o consegui encontrar seu CPF em nossa base de dados. üò¢

Verifique se digitou corretamente e tente novamente.
"""
                return {"telefone": numero, "resposta": resposta}
            else:
                # global info_cliente
                # info_cliente = base_clientes.query("cpf == @cpf_informado")
                data_nascimento_cliente = parser.parse(str(base_clientes.query("cpf == @cpf_informado")["data_nascimento"].values[0])).strftime('%Y-%m-%d')
                primeiro_nome_cliente = base_clientes.query("cpf == @cpf_informado")["nome"].values[0].split(" ")[0]
                # dados_cliente["primeiro_nome"] = primeiro_nome_cliente
                resposta = f"""√ìtimo, {primeiro_nome_cliente}! Consegui localizar aqui. Agora preciso que me informe sua data de nascimento."""
                collection.update_one({"numero": numero}, {"$set": {"cpf": cpf_informado, "data_nascimento": data_nascimento_cliente, "primeiro_nome": primeiro_nome_cliente, "autenticar_cpf": 0, "autenticar_data_nascimento": 1}})
                return {"telefone": numero, "resposta": resposta}
        if historico["autenticar_data_nascimento"]:
            try:
                data_nascimento_informada = parser.parse(str(mensagem)).strftime('%Y-%m-%d')
            except:
                resposta = f"""Desculpe, n√£o consegui entender a data de nascimento informada. üò¢"""
                return {"telefone": numero, "resposta": resposta} 
            # print(data_nascimento_informada, dados_cliente["data_nascimento"].values[0])
            
            if data_nascimento_informada != historico["data_nascimento"]:
                resposta = f"""Desculpe, a data de nascimento informada n√£o confere com a data de nascimento cadastrada em nosso sistema. üò¢
Por favor, verifique se digitou corretamente e tente novamente.
"""
                return {"telefone": numero, "resposta": resposta}
            else:
                resposta = f"""Perfeito, {historico["primeiro_nome"]}! Seus dados foram validados com sucesso üöÄ
Me conta, o que posso fazer por voc√™ hoje? ‚ô®Ô∏è
"""
                collection.update_one({"numero": numero}, {"$set": {"cpf": historico["cpf"], "autenticar_data_nascimento": 0, "inicio_chatbot": 1}})
                return {"telefone": numero, "resposta": resposta}

        if historico["inicio_chatbot"]:
            cpf_cliente = historico["cpf"]
            dados_cliente = base_clientes.drop("dt_ref", axis=1).query("cpf == @cpf_cliente").to_dict(orient="records")[0]
            dados_cliente["data_nascimento"] = dados_cliente["data_nascimento"].strftime("%Y-%m-%d")
            
            ofertas_disponiveis = _carregar_ofertas(cpf_cliente)
            mensagens_anteriores = [i for i in historico["chat"]]

            prompt = _carrega_prompt(dados_cliente, ofertas_disponiveis)
            
            param_messages = mensagens_anteriores.copy()
            param_messages.append({"role": "system", "content": prompt})
            param_messages.append({"role": "user", "content": mensagem})

            resposta = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=param_messages
            )['choices'][0]['message']['content']

            mensagem_recebida = {
                "role": "user",
                "content": mensagem,
                # "data_hora": data_hora_recebida,
            }

            mensagem_resposta = {
                "role": "assistant",
                "content": resposta,
                # "data_hora": datetime.now().strftime('%Y-%m-%d - %H:%M'),
            }

            collection.update_one(
                {"numero": numero},
                {"$push": {"chat": {"$each": [mensagem_recebida, mensagem_resposta]}}}
            )
            return {"telefone": numero, "resposta": resposta}




# Fun√ß√£o para enviar resposta
def envia_resposta(telefone, resposta):

    url = "http://localhost:8080/message/sendText/NegociaAI"

    headers = {
        "Content-Type": "application/json",
        "apikey": "i5v3b75srig1582t6dcof6" # Cuidado para colocar a chave correta
    }

    json_resposta = {
        "number": telefone,
        "options": {
            "delay": 1200,
            "presence": "composing",
            "linkPreview": False
        },
        "textMessage": {
            "text": f"{resposta}"
        }
    }

    response = requests.post(url, headers=headers, json=json_resposta)


if __name__ == "__main__":
    app.run(debug=True, port=5000)


# Testar o que j√° foi feito!!!

# D√∫vida: e se tiver muitas mensagens simultaneamente? Vai dar problema?
#    # Verificar como colocar as mensagens em uma fila de processamento para evitar problemas

# Implantar reset de chat (come√ßar do zero)
#   # Autentica matr√≠cula de novo? Se n√£o, manter banco de dados telefone/matr√≠cula autenticada?
#   # No outro dia, for√ßa come√ßar do zero?
#   # Explica tudo de novo?
#   # Etc.
#     # Implantar limite de tentativas para autentica√ß√£o
#     # Implantar limite de intera√ß√µes na parte do chatbot (mensagem informativa dizendo que o limite di√°rio de intera√ß√µes para aquele n√∫mero de telefone foi atingido)